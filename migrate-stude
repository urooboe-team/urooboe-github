<マイグレーション関係>

「作業内容」
・テーブルの数だけマイグレーションファイルを作成しました。
・カラム不足が判明した場合、追加のマイグレーションファイルを作成しました。


「マイグレーションファイルについて」
・テーブルを作成するためのファイル
・このファイルにはup状態とdown状態の２種類がある
・ファイルの作成時はdown状態である
・ファイルがdown状態からup状態になると、ファイル内の記載が反映される
・ファイルをdown状態からup状態にするコマンドが　rails db:migrate　である
・down状態でファイルを編集し、up状態に切り替えることが重要（down → up　が必須）
・up状態のファイルを編集して、rails db:migrate　も意味はない（up → upなので）


「使用したコマンドとその意味」
・rails db:migrate　　　＃migratetionファイルを全てup状態にする。

・rails db:migrate:status　＃migratetionファイルの状態確認（up or down）。

・rails db:migrate:reset ＃全てのmigratetionファイルの状態を一度downに切り替え、その後全てupにする。その際、データベースは全消去される。

・rails db:rollback　　　＃migratetionファイルを最新のものから一つずつdown状態にしていく。



よって、カラムの追加や名前変更をしたければ、

①作成済みのマイグレーションファイルを開く  ＃この時点ではup状態
②ファイルを編集（カラム追加、名前変更）　＃この時点ではup状態なので、編集内容は反映されない
③rails db:migrate:reset　　　　　　　＃変更完了（up → down → upとなったため）

とすると凄く楽でした。開発初期段階では、データベースはほぼ空なのでリスクはほどんどないかと思われます。



「マイグレーションに苦戦した原因」
・rails db:migrate:resetを知らなかった。
・一度作ったマイグレーションファイルは、編集不可と勘違いをしていた。
・そのため、削除しても問題ないと考え、実際に削除した。
・これは、カラム名を間違えるたびに、新たなマイグレーションファイルが増えていったため整理するためであった。
・自分だけの開発なら問題なかったが、他の人がrails db:migratを行うとエラーが起こった。


よって、マイグレーションファイルの削除はあまりおすすめしません。


今回　rails db:migrate や　rails db:migrate:reset　　でエラーとなった要因は、マイグレーションファイルを削除してしまったことに尽きると思います。
